pragma solidity ^0.5.11;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

contract SupplyChain is
    FarmerRole,
    DistributorRole,
    RetailerRole,
    ConsumerRole
{
    address owner;

    // Universal Product Code (UPC)
    uint256 upc;

    // Stock Keeping Unit (SKU)
    uint256 sku;

    // Maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Maps the UPC to an array of TxHash,
    // that tracks its journey through the supply chain
    mapping(uint256 => string[]) itemsHistory;

    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    State constant defaultState = State.Harvested;

    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Address of the current owner as the product moves through 8 stages
        address originFarmerID; // Address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint256 productID; // Product ID derived from combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Address of the Distributor
        address retailerID; // Address of the Retailer
        address consumerID; // Address of the Consumer
    }

    // Events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 upc);
    event Processed(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    // Checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address);
        _;
    }

    // Checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price);
        _;
    }

    // Checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = items[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        address payable addr = address(uint160(items[_upc].consumerID));
        addr.transfer(amountToReturn);
    }

    // Checks if an item.state of a upc is Harvested
    modifier harvested(uint256 _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    // Checks if an item.state of a upc is Processed
    modifier processed(uint256 _upc) {
        require(items[_upc].itemState == State.Processed);
        _;
    }

    // Checks if an item.state of a upc is Packed
    modifier packed(uint256 _upc) {
        require(items[_upc].itemState == State.Packed);
        _;
    }

    // Checks if an item.state of a upc is ForSale
    modifier forSale(uint256 _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    // Checks if an item.state of a upc is Sold
    modifier sold(uint256 _upc) {
        require(items[_upc].itemState == State.Sold);
        _;
    }

    // Checks if an item.state of a upc is Shipped
    modifier shipped(uint256 _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    // Checks if an item.state of a upc is Received
    modifier received(uint256 _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    // Checks if an item.state of a upc is Purchased
    modifier purchased(uint256 _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    constructor() public payable {
        owner = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Kills contract
    function kill() public onlyOwner {
        if (msg.sender == owner) {
            selfdestruct(address(uint160(owner)));
        }
    }

    // Allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes
    ) public onlyFarmer {
        uint256 productID = uint256(sha256(abi.encodePacked(_upc + sku)));
        // Add the new item as part of Harvest
        items[_upc] = Item(
            sku,
            upc,
            _originFarmerID,
            _originFarmerID,
            _originFarmName,
            _originFarmInformation,
            _originFarmLatitude,
            _originFarmLongitude,
            productID,
            _productNotes,
            0,
            State.Harvested,
            /* distributorID */
            address(0),
            /* retailerID */
            address(0),
            /* consumerID */
            address(0)
        );
        // Increment sku
        sku = sku + 1;

        // Emit event
        emit Harvested(_upc);
    }

    // Allows a farmer to mark an item 'Processed'
    function processItem(uint256 _upc)
        public
        onlyFarmer
        harvested(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        // Update fields
        items[_upc].itemState = State.Processed;

        // Emit event
        emit Processed(_upc);
    }

    // Allows a farmer to mark an item 'Packed'
    function packItem(uint256 _upc)
        public
        onlyFarmer
        processed(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        // Update fields
        items[_upc].itemState = State.Packed;

        // Emit event
        emit Packed(_upc);
    }

    // Allows a farmer to mark an item 'ForSale'
    function sellItem(uint256 _upc, uint256 _price)
        public
        onlyFarmer
        packed(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        // Update fields
        items[_upc].itemState = State.ForSale;
        items[_upc].productPrice = _price;

        // Emit event
        emit ForSale(_upc);
    }

    // Allows the disributor to mark an item 'Sold'
    function buyItem(uint256 _upc)
        public
        payable
        onlyDistributor
        forSale(_upc)
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.Sold;

        // Transfer money to farmer
        address(uint160(items[_upc].originFarmerID)).transfer(msg.value);

        // Emit event
        emit Sold(_upc);
    }

    // Allows the distributor to mark an item 'Shipped'
    function shipItem(uint256 _upc)
        public
        onlyDistributor
        sold(_upc)
        verifyCaller(items[_upc].distributorID)
    {
        items[_upc].itemState = State.Shipped;

        // Emit event
        emit Shipped(_upc);
    }

    // Allows the retailer to mark an item 'Received'
    function receiveItem(uint256 _upc) public onlyRetailer shipped(_upc) {
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;
        items[_upc].itemState = State.Received;

        // Emit event
        emit Received(_upc);
    }

    // Allows the consumer to mark an item 'Purchased'
    function purchaseItem(uint256 _upc)
        public
        payable
        onlyConsumer
        received(_upc)
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.Purchased;
        address(uint160(items[_upc].retailerID)).transfer(msg.value);

        // Emit event
        emit Purchased(_upc);
    }

    // Fetches the data
    function fetchItemBufferOne(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        Item memory item = items[_upc];

        return (
            item.sku,
            item.upc,
            item.ownerID,
            item.originFarmerID,
            item.originFarmName,
            item.originFarmInformation,
            item.originFarmLatitude,
            item.originFarmLongitude
        );
    }

    // Fetches the data
    function fetchItemBufferTwo(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        Item memory item = items[_upc];

        return (
            item.sku,
            item.upc,
            item.productID,
            item.productNotes,
            item.productPrice,
            uint256(item.itemState),
            item.distributorID,
            item.retailerID,
            item.consumerID
        );
    }
}
